import './style.css'; // Import stylesheets

import { findMats, getPathsFromStr, Mat, traverseEdges, toScaleAxis, getCurveToNext, isTerminating } from 'flo-mat';

const NS = 'http://www.w3.org/2000/svg'; // Svg namespace

/**
 * Creates and returns an SVG DOM element.
 * @param id The dom id to assign to the SVG element, e.g. 1 -> 'svg-1'
 */
function createSvg(id: number) {
    let $e = document.createElementNS(NS, 'svg');
    $e.setAttributeNS(null, 'id', 'svg' + id);
    $e.setAttributeNS(null, 'style', 'width: 100%; display: inline-block');
    $e.setAttributeNS(null, 'viewBox', '75 4 557 502');

    return $e;
}

/**
 * Returns an SVG path string of a line.
 * @param ps The line endpoints.
 */
function getLinePathStr(ps: number[][]) {
    let [[x0,y0],[x1,y1]] = ps;
    return `M${x0} ${y0} L${x1} ${y1}`;
}

/**
 * Returns an SVG path string of a quadratic bezier curve.
 * @param ps The quadratic bezier control points.
 */
function getQuadBezierPathStr(ps: number[][]) {
    let [[x0,y0],[x1,y1],[x2,y2]] = ps;
    return `M${x0} ${y0} Q${x1} ${y1} ${x2} ${y2}`;
}

/**
 * Returns an SVG path string of a cubic bezier curve.
 * @param ps The cubic bezier control points.
 */
function getCubicBezierPathStr(ps: number[][]) {
    let [[x0,y0],[x1,y1],[x2,y2],[x3,y3]] = ps;
    return `M${x0} ${y0} C${x1} ${y1} ${x2} ${y2} ${x3} ${y3}`;
}


/**
 * The SVG path string representing our shape.
 */
const svgPathStr2 = ''
const svgPathStr = `
         M 377.0,462.3259077834862 C 372.4508362174215,461.5636073017164,369.00167639662396,459.780403309666,368.88151738159695,458.12867965644034 C 368.51124680613566,453.0388853747129,370.6172712188231,450.6830585972762,379.27175148277325,446.5060262950045 C 384.8767190179249,443.8008227780429,385.53202006121245,443.16589581475694,385.81996628246884,440.1614031934495 C 386.1768174094542,436.4379420094322,384.0503699835436,434.0858022378292,380.2785133808091,434.03180337187047 C 376.007841861576,433.9706633437067,367.0715037962185,429.1168070288138,359.12348218104216,422.54124862452863 C 352.34014186282104,416.9292545210606,350.7955272180784,415.06943029652734,349.0554333035657,410.4186125613211 C 346.60015520983853,403.8562938221238,346.3804322079433,394.61373112628195,348.5126138431632,387.5851228856037 C 349.33264473692043,384.8819404726857,349.8902738060185,382.5766698884931,349.75178955227,382.4622993651757 C 349.6133052985215,382.3479288418582,347.925,381.4678584688207,346.0,380.5065874250923 C 340.01836310957765,377.51958776958026,339.0,376.12607865829244,339.0,370.92791780590306 C 339.0,368.308758917473,339.8294348616648,364.21600332042345,340.8431885814774,361.83290536801513 C 341.85694230128996,359.4498074156068,342.96654811892586,355.25,343.308979287335,352.5 C 344.8069654443482,340.46995626617513,345.0461382804975,340.2354688205388,361.62132167109985,334.54639599412053 C 362.23804859020476,334.3347178320081,363.0509168191042,332.88768312155764,363.42769551309857,331.33076330423074 C 364.3015866479795,327.7196821901197,368.9087470322149,318.72839324718655,370.378668468308,317.76531277451704 C 370.9954008107386,317.3612348005014,373.3935307722463,317.0237348005014,375.7078461605473,317.01531277451704 C 379.6202373292053,317.0010751903701,380.0941903016196,317.3045837744558,382.4578461605473,321.3378575454512 C 383.8560307722463,323.72367919544934,385.0,326.64867919544935,385.0,327.8378575454512 C 385.0,329.027035895453,385.3621228911164,330.0,385.80471753581423,330.0 C 386.24731218051204,330.0,389.5098121805121,327.9262377563951,393.05471753581423,325.39163945865585 C 396.5996228911164,322.85704116091654,404.07156971004724,318.6229714508692,409.659043800105,315.98259565855074 C 415.24651789016275,313.3422198662322,420.79762178709484,310.202378212905,421.9948302377319,309.005169762268 C 423.86077659251816,307.1392234074818,424.55197047363134,306.9891734629018,426.8357864376269,307.95425593134894 C 428.3011038969321,308.57346177498044,431.0212394639558,310.33591419175536,432.880532142124,311.87081685751536 C 435.7051940664208,314.20266120261624,436.34048113405873,315.4880558932997,436.7440389153779,319.68796180936323 C 437.4627940230379,327.1681888514335,434.5770820666021,329.8790465846447,420.0,335.4174275579145 C 399.03473934919106,343.3829175069704,390.5257910350844,347.42531896056454,390.21069238511507,349.56962780154913 C 389.774354804679,352.5389916229239,395.44975827078105,360.36718341262684,399.4069899329668,362.25425566805063 C 401.3265671468771,363.16963824146126,405.5099997033196,364.59565008471355,408.7035067250613,365.42317087527795 C 414.08645027211327,366.8180316566363,415.1658521905075,366.78268374922106,423.504941564114,364.9384582400794 C 428.4522237038513,363.8443455001557,438.3893671458722,362.67457505404565,445.5874825463827,362.3389683598347 C 457.35614938884754,361.79026315652703,459.3365492525737,361.9489354274602,465.24030331154177,363.91357849699284 C 475.212354608115,367.2320638663278,483.5194189296793,373.2235030747132,488.36611862197566,380.59298667457654 C 491.99685622375284,386.1135806685128,496.57677822419095,399.9100300955488,498.1155528032947,409.9619531355594 C 499.46588027776573,418.7828603928794,500.4997372029944,420.0,506.64202273809786,420.0 C 508.1100277695923,420.0,510.4242556927469,421.27040953890054,512.2109339341887,423.05708778034256 C 515.05308066568,425.89923451183444,515.2292793591079,426.48955286486057,514.7169925743187,431.45313419957296 C 513.7093577684593,441.2161760407315,507.3582604590698,447.68215648719604,492.89526512373925,453.66958847983153 C 489.3778693056826,455.125730016457,484.25,456.6687690191602,481.5,457.09856404139435 C 478.75,457.5283590636285,473.35,458.54462539858326,469.5,459.35693367462716 C 464.379337485548,460.4373379705537,452.1636438294862,460.99353098554025,424.0,461.4285951696196 C 402.825,461.7557007158215,384.15,462.1856697264548,382.5,462.3840818599159 C 380.85,462.58249399337694,378.375,462.5563156589836,377.0,462.3259077834862 M 432.0,459.50431556896217 C 470.7690309961223,459.0261191196134,472.91155371201324,458.64028509424753,478.75962953931696,451.0836552156517 C 482.97666574252463,445.63458398037454,484.93669838812355,442.33876555965514,489.5140310414164,433.0 C 491.26629306480595,429.425,493.8377153864887,424.8303901569163,495.2283028673781,422.7897559042584 C 497.4949508956467,419.4635361095527,497.66333760321095,418.583753951136,496.85516810964697,414.2897559042584 C 496.3593565120055,411.6553901569163,495.71503451247133,408.15,495.4233414440156,406.5 C 493.5044109667828,395.6453187276725,487.3624735347188,381.2715644438098,482.6142461681766,376.52333707726746 C 478.9317150363635,372.84080594545424,470.07071801174715,367.44934153638275,464.4844676977749,365.4922922528558 C 458.15976204823954,363.27653750427555,443.81216633376187,363.30731929711845,432.0,365.56198547360054 C 416.9856064611374,368.42788189902643,411.83318591767846,368.49813292208034,404.03994336948364,365.9432087387379 L 397.059430765318,363.65472864149774 L 394.9351892868074,366.3552640710923 C 392.196714747402,369.8366703008078,386.3370901465919,372.80288032085014,380.8417657073703,373.4895187522279 L 376.5,374.0320205148974 L 381.7369039574701,372.16108675738246 C 386.68597574941344,370.3929837791516,394.43761507811246,365.71897491274933,395.6356096416471,363.78057899061275 C 395.937023309821,363.2928814308337,395.3316529635757,362.1302385198544,394.29034220554655,361.1969280773254 C 390.97057421402627,358.22147227859386,388.1970560661917,352.65210911143026,387.46933279175505,347.5 C 387.0809017703194,344.75,385.8335348393928,340.8125,384.6974062785848,338.75 L 382.63171798620675,335.0 L 374.8674809519216,335.0 C 369.35117670481134,335.0,364.7991920856845,335.72784965425535,359.1451747686756,337.5139529407653 C 348.07400530771395,341.0113338384582,347.19504360849305,341.91350537383136,345.51894161171447,351.5 C 344.7496459438596,355.9,343.4181722171014,361.17304661609666,342.56011110780736,363.2178813691037 C 340.4377036944943,368.27576406740343,340.54151408765125,374.2751008276966,342.78659839232284,376.30687419931746 C 345.17709100337055,378.47024027963664,351.3758774621207,381.0,354.2863801416753,381.0 C 357.9260956091698,381.0,366.55466353656976,378.18119676996633,369.01607931243626,376.1880631931843 C 371.0914743396244,374.507510255183,371.2208227178972,373.66347513630126,371.0702093124475,362.7842781445446 C 370.970942502961,355.6139789807856,371.30920272338244,350.9269361962855,371.95473722361635,350.52797393423026 C 372.6537184235405,350.0959797951799,373.0,353.0271738338139,373.0,359.37588334445053 C 373.0,364.59753787771075,373.45999458899155,370.0796781339008,374.022210197759,371.558417247095 C 374.8522785178656,373.74166238014277,374.71130319933013,374.51605297523514,373.272210197759,375.6782373145559 C 369.7052460833544,378.55885019235774,361.4815383169242,381.920864867074,356.4710515419695,382.54688386150394 L 351.3292892653668,383.1893046470624 L 350.05437666791727,389.60336834621614 C 348.6601985279482,396.6174549711493,349.25324608227805,406.2820839264452,351.3909780605069,411.385359396001 C 352.7757105128906,414.69104562239266,362.82623590869855,424.0186247924879,369.5,428.19177788473667 C 371.7,429.5674538417147,375.975,431.26931791985015,379.0,431.9736980583709 C 386.42444119424096,433.7025010060862,388.2521388555484,435.4314631918688,387.70080377846716,440.2044689551954 C 387.144306462368,445.02216513930045,385.9504616447638,446.3986594979373,381.05694133822465,447.86479384306955 C 373.5967359076145,450.0999257559675,368.8343699644275,455.9969026185074,372.25,458.7699468533193 C 374.4472894313973,460.5538580868228,377.2548227901119,460.8289120527713,388.5,460.36195890645786 C 394.55,460.11073418296377,414.125,459.7247946810907,432.0,459.50431556896217 M 405.02196200049093,455.2003400731158 C 404.97004768625544,449.7643476584775,410.59442785173803,444.0,415.9503400731158,444.0 C 417.8335083938774,444.0,418.0,443.3936220297035,418.0,436.53494722522464 C 418.0,432.4291681990982,417.36602844520837,427.14166819909826,416.59117432268533,424.78494722522464 C 412.23715643893286,411.54218969320345,413.15772729145624,402.3440629480943,419.23577164959806,398.3607547407016 C 422.39954018232487,396.28734684498266,434.2034401433191,393.16798969436536,446.5,391.15577452721914 C 449.8,390.6157608869021,453.4,389.84590996255656,454.5,389.4449946953402 C 456.3219276103945,388.78095960918546,456.3626036167511,388.86291492947925,454.95684798689706,390.36546665031653 C 453.9464123444281,391.4454778422652,449.16518652938936,392.7079987215977,441.10677945456223,394.0226879108683 C 434.3379753689847,395.1269847617184,426.6262780977359,396.9655514285783,423.9696744073427,398.1083916150014 C 415.84515930039186,401.6034640614493,414.1580712510453,408.4673398134801,418.0327407490534,422.26265848585695 C 419.40008945290793,427.13094754009296,419.99892476965346,431.95503040233507,419.8621538884261,437.0 C 419.6711076101311,444.04698731993585,419.8050338175535,444.5689728460772,422.0794131393727,445.6419025743511 C 423.4107359127177,446.2699489902442,431.54483628007324,447.09270229671097,440.1551917334961,447.4702432553883 C 453.37308736419214,448.049812474697,456.7635024062038,447.8892498047823,461.9324380343639,446.4389203152381 C 465.2995680464183,445.494151739478,468.2963839565134,444.96305062317975,468.59202894568637,445.258695612353 C 469.7637500319177,446.4304166985853,458.2423416906384,449.29104246517414,452.5492139829571,449.24193173172347 C 436.06486332861044,449.0997324710252,422.26146065621987,448.2102970136685,420.30715382484595,447.16438373841504 C 415.07037952930574,444.36174718857444,409.9255226631896,446.75033442479446,406.9137479717981,453.3825000247589 C 405.47391205980205,456.55313235407215,405.0388735801367,456.9711660972685,405.02196200049093,455.2003400731158 M 495.9886724277068,449.70569834603054 C 508.25598054787474,443.61723424043856,511.95353473617496,439.5389720588299,512.753375982065,431.2148654846874 C 513.1550285024637,427.0347879971214,512.8845946520628,425.9703938581504,510.9669906130213,424.1838739356081 C 509.7241613627058,423.02600235690784,506.7304799911371,421.7822102557066,504.3143653428687,421.41989148849416 C 498.4615540961395,420.5422082390004,497.0484036390595,421.93350748823445,491.05455155128055,434.47467194785133 C 488.41925532195165,439.9886023765331,484.40390549273354,446.84926194957734,482.1315519307958,449.7205821101719 C 479.85919836885813,452.5919022707664,478.0,455.22948317543245,478.0,455.5818730094298 C 478.0,457.20215858829414,486.4382839970532,454.44571111695774,495.9886724277068,449.70569834603054 M 391.7635688444383,345.0409666021868 C 395.67034235048845,342.883250036233,411.10207004759,336.55504138752593,420.0,333.46183357479356 C 431.8403271258096,329.34575347900204,435.0,326.75201448724835,435.0,321.14850671298194 C 435.0,317.809545150533,434.3569475334952,316.42361420016186,431.4666666666667,313.5333333333333 C 429.5233333333333,311.59,427.2331606270788,310.0,426.37739398610097,310.0 C 425.5216273451232,310.0,420.6991273451232,313.86011253336557,415.66072731943433,318.5780278519235 C 406.65941340057975,327.00678233913914,402.9721733232214,329.8401923647949,403.0283818516915,328.28518375848796 C 403.0439918701218,327.8533326913196,404.8550718043885,325.47869331142226,407.05300392783977,323.0082073587161 C 413.95224798006484,315.2534248822901,409.1885059897206,316.77616808508805,393.79969836427244,327.24466285996533 C 388.9598642639226,330.5370412705577,385.0,333.6468013344094,385.0,334.15524077963585 C 385.0,334.6636802248622,385.9,336.8438218740261,387.0,339.0 C 388.1,341.1561781259739,389.0,343.6132509956905,389.0,344.46016193270356 C 389.0,346.2565905960023,389.40749220714827,346.3422310811909,391.7635688444383,345.0409666021868 M 375.625,333.0 C 377.92424242424244,333.0,379.0,332.53251028806585,379.0,331.5333333333333 C 379.0,329.5988291212768,372.35768786968924,323.0,370.4104362349335,323.0 C 368.6385808428465,323.0,364.5709346011854,331.49674060694656,365.56938702795685,333.1122705696125 C 365.9584402597458,333.74177192208003,367.51031291230345,333.9479374175393,369.24628018737656,333.6007439625247 C 370.8983260843195,333.2703347831361,373.76875,333.0,375.625,333.0 M 406.4757853436482,330.9608198629969 C 406.1144318676387,330.37613765686064,409.1021215237415,330.0,414.1076496722917,330.0 C 418.63177568586457,330.0,422.12914597146,330.2041873618733,421.87958364028145,330.45374969305186 C 420.91090432479234,331.4224290085411,407.0432104078579,331.87893290295676,406.4757853436482,330.9608198629969 
`;


/**
 * Adds a path to the given SVG element and give it a shape-path class.
 */
function setSvgShapePath(
        test: SVGSVGElement, 
        pathStr: string) {

    let $path = document.createElementNS(NS, 'path'); // Create SVG path elem.
    $path.setAttribute('class', 'shape-path'); 
    test.appendChild($path); // Add the path element to the SVG.
    document.body.appendChild(test); // Add the SVG to the document body.
    $path.setAttribute('d', pathStr); 
}


function main() {
    // Create and add and SVG element to our HTML page.
    let $svg = createSvg(1); // Create SVG element.
    let $stand_alone = createSvg(2);

    setSvgShapePath($svg, svgPathStr);
    setSvgShapePath($stand_alone, svgPathStr2);

    // Get loops (representing the shape) from some SVG path.
    let bezierLoops = getPathsFromStr(svgPathStr);
      
    // We could also just give an array of linear, quadratic or cubic beziers as 
    // below (all lines in this case). Note that in the below case there is only
    // one array of beziers (forming a single loop shape).
    /*
    bezierLoops = [
        [
            [[50.000, 95.000],[92.797, 63.905]], 
            [[92.797, 63.905],[76.450, 13.594]],
            [[76.450, 13.594],[23.549, 13.594]],
            [[23.549, 13.594],[7.202,  63.90]],
            [[7.202,  63.900],[50.000, 95.000]]
        ]
    ];
    */
        
    // Get MATs from the loops.
    let mats = findMats(bezierLoops, 3);

    // Draw the MATs.
    drawMats(mats, $svg, $stand_alone, 'mat');

    // Get the SAT (at scale 1.5) of the MATs (of which there is only 1)
    let sats = mats.map(mat => toScaleAxis(mat, 1.5));

    drawMats(sats, $svg, $stand_alone, 'sat');

    // Serialize the SVG element to a string
    const svgString = new XMLSerializer().serializeToString($stand_alone);

    // Convert the SVG string to a Blob
    const svgBlob = new Blob([svgString], { type: 'image/svg+xml' });

    const svgUrl = URL.createObjectURL(svgBlob);

    const downloadLink = document.createElement('a');
    downloadLink.href = svgUrl;
    downloadLink.download = 'extracted_sat.svg';

    document.body.appendChild(downloadLink);
    downloadLink.click();

    document.body.removeChild(downloadLink);
    URL.revokeObjectURL(svgUrl);


}


/**
 * Returns a function that draws an array of MAT curves on an SVG element.
 * @param mats An array of MATs to draw.
 * @param svg The SVG element on which to draw.
 * @param type The type of MAT to draw. This simply affects the class on the 
 * path element.
  */
function drawMats(
        mats: Mat[],
        svg: SVGSVGElement,
        stand_alone: SVGSVGElement,
        type: 'mat' | 'sat') {

    mats.forEach(f);

    /**
     * Draws a MAT curve on an SVG element.
     */
     function f(mat: Mat) {
        let cpNode = mat.cpNode;
        
        if (!cpNode) { return; }

        let fs = [,,getLinePathStr, getQuadBezierPathStr, getCubicBezierPathStr];

        traverseEdges(cpNode, function(cpNode) {
            if (isTerminating(cpNode)) { return; }
            let bezier = getCurveToNext(cpNode);
            if (!bezier) { return; }

            let $path = document.createElementNS(NS, 'path');
            $path.setAttributeNS(
                null, 
                "d", 
                fs[bezier.length](bezier)
            );
            $path.setAttributeNS(null, "class", type);
            stand_alone.appendChild($path);
            //svg.appendChild($path);
        });
    }
}


main();
